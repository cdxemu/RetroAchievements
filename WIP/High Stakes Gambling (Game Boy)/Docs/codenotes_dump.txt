// High Stakes Gambling
// #ID = 4210

// $C200: [8-bit] Cursor Y Position
//        (value increases from top to bottom of screen)
function CursorYPosition() => byte(0x00C200)

// $C201: [8-bit] Cursor X Position
//        (value increases from left to right side of screen)
function CursorXPosition() => byte(0x00C201)

// $C207: [8-bit] Showing Bet Results?
//        (Craps)
//        00 = player control or during dice roll
//        10 = player control paused to show bet results
function ShowingBetResults() => byte(0x00C207)

// $C236: [8-bit] Is Player's Card 1 Held
//        (Video Poker/Draw Poker)
//        00 = No (hold not yet selected)
//        03 = No (hold deselected or 2nd draw in progress)
//        06 = Yes (hold selected)
function IsPlayersCard1Held() => byte(0x00C236)
IsPlayersCardHeldValue = {
    "Not Selected": 0x00,
    "Deselected": 0x03,
    "Selected": 0x06,
}

// $C23A: [8-bit] Is Player's Card 2 Held
//        (Video Poker/Draw Poker - see 0xc236 for list)
function IsPlayersCard2Held() => byte(0x00C23A)

// $C23E: [8-bit] Is Player's Card 3 Held
//        (Video Poker/Draw Poker - see 0xc236 for list)
function IsPlayersCard3Held() => byte(0x00C23E)

// $C242: [8-bit] Is Player's Card 4 Held
//        (Video Poker/Draw Poker - see 0xc236 for list)
function IsPlayersCard4Held() => byte(0x00C242)

// $C246: [8-bit] Is Player's Card 5 Held
//        (Video Poker/Draw Poker - see 0xc236 for list)
function IsPlayersCard5Held() => byte(0x00C246)

// $C280: [8-bit] Bonus Item Y Position
//        (Slots)
//        00 = not visible or not at slot machine
//        20 = not visible (at craps table)
//        34 = above slot machine (pre-purchase)
//        60 = slot machine row 1
//        70 = slot machine row 2
//        77 = not visible (at Shady)
//        80 = slot machine row 3
//        90 = below slot machine (purchased)
function BonusItemYPosition() => byte(0x00C280)

// $C281: [8-bit] Bonus Item X Position
//        (Slots)
//        00 = not visible or not at slot machine
//        10 = Player's slot machine column 1
//        28 = Player's slot machine column 2
//        40 = Player's slot machine column 3
//        4a-aa = not visible (at craps table)
//        4c = centered (pre-purchase)
//        5f = not visible (at Shady)
//        TBD = Opponent's slot machine
function BonusItemXPosition() => byte(0x00C281)

// $C29C: [8-bit] Shady - Selected Row
//        00 = N/A (not at Shady)
//        6e = Row 1
//        96 = Row 2
function ShadySelectedRow() => byte(0x00C29C)

// $C29D: [8-bit] Shady - Selected Column
//        00 = N/A (not at Shady)
//        28 = Col 1
//        40 = Col 2
//        58 = Col 3
function ShadySelectedColumn() => byte(0x00C29D)

// $C2AC: [8-bit] "Topmost" Card in Play?
//        (Blackjack/Draw Poker - see 0xcbec for list)
//        During deal: last card drawn
//        During cheat use: "See Next Card", "See Deal Down", or "Swap Card" (opponent's) card
//        Otherwise: dealer's face-up card (Blackjack) or last card in active hand (Draw Poker)
function TopmostCardInPlay() => byte(0x00C2AC)

// $C2AD: [8-bit] Active Hand Point Value
//        (Blackjack - can be player's main or split hand, opponent's hand, or dealer's hand)
function ActiveHandPointValue() => byte(0x00C2AD)

// $C2AE: [8-bit] Controller Input
//        (Bit Flags)
//        Bit0 = A
//        Bit1 = B
//        Bit2 = select
//        Bit3 = start
//        Bit4 = right
//        Bit5 = left
//        Bit6 = up
//        Bit7 = down
function ControllerInputA() => bit0(0x00C2AE)
function ControllerInput() => byte(0x00C2AE)

// $C2B1: [8-bit] Current Casino Game
//        (or last game played if went back to main menu)
//        00 = none
//        01 = Blackjack
//        02 = Craps
//        04 = Draw Poker
//        08 = Slots
//        10 = Video Poker
function CurrentCasinoGame() => byte(0x00C2B1)
CurrentCasinoGameValue = {
    "Blackjack": 0x01,
    "Craps": 0x02,
    "DrawPoker": 0x04,
    "Slots": 0x08,
    "VideoPoker": 0x10
}

// $C2B2: [8-bit] Game Flow Control
//        (Note: The casino game gameplay is loaded for a moment before Shady.)
//        00 = Video Poker Gameplay
//        01 = Pre/Post-Mission Cutscene, Post-Mission Score Display, Continue Screen
//        02 = Pre-Mission Gangster Portrait
//        05 = Mode Select, Play/Password Select
//        06 = Shady
//        07 = Entry Fee/Ante Display, Slots Gameplay
//        08 = Blackjack/Draw Poker Gameplay
//        09 = Title Screen
//        0a = Password Screen (both entry and display-only)
//        0b = Score Card
//        20 = Copyright Screen (appears before Title Screen)
//        (Unmodified/Keeps Prev Value) = Slots/Craps Gameplay, Practice Game Select, Credits, Pre-Mission Cash Display, Out of Cash Screen
function GameFlowControl() => byte(0x00C2B2)
GameFlowControlValue = {
    "MissionScore": 0x01,
    "GangsterPortrait": 0x02,
    "ModeOrPlayPasswordSelect": 0x05,
    "TitleScreen": 0x09,
    "ScoreCard": 0x0B,
    "CopyrightScreen": 0x20
}

// $C2BC: [8-bit] Unknown Menu Property?
//        08 = Practice Mode Insurance Yes/No Menu
//        (many other values not noted/used)
function UnknownMenuProperty() => byte(0x00C2BC)
UnknownMenuPropertyValue = {
    "Insurance": 0x08
}

// $C2B4: [8-bit] Combined Dice Roll
//        (Craps)
function CombinedDiceRoll() => byte(0x00C2B4)

// $C2B5: [8-bit] Die 1 Roll
//        (Craps)
function Die1Roll() => byte(0x00C2B5)

// $C2B6: [8-bit] Die 2 Roll
//        (Craps)
function Die2Roll() => byte(0x00C2B6)

// $C2BF: [16-bit] Was Competitive Mode Password Used?
//        (Unreliable/Persistent - 0x0a0c value is not cleared after Game Over/Ending, even if password was used)
//        0a0c = Competitive (no password, or used password and got Game Over/Ending)
//        2800 = Practice, Main Menu, Competitive (used password - before casino gameplay?)
//        280c = Competitive (used password - once casino gameplay starts, replaced with 0x0a0c after Game Over even if continued)
function WasCompetitiveModePasswordUsed() => word(0x00C2BF)
WasCompetitiveModePasswordUsedValue = {
    "NotUsed": 0x0A0C,
    "UsedPreGameplay": 0x2800,
    "UsedGameplay": 0x280C
}
// $C2C4: [8-bit] Was Video Poker Ever Started?
//        (Persistent - not cleared between casino games, after exiting Practice Mode, nor after Game Over/Ending)
//        00 = initial value
//        22 = video poker gameplay was started
function WasVideoPokerEverStarted() => byte(0x00C2C4)

// $C2C5: [8-bit] Game Progress Indicator?
//        (Upper4)
//        0 = No progress made in Practice Mode
//        1 = Made progress in Practice Mode
//        4 = Competitive Mode - Game Over just initiated?
//        (Lower4)
//        0 = Competitive Mode not started
//        6 = Competitive Mode started
// 
// Observed values:
//        00 = initial value/no game active
//        06 = started Competitive Mode (cleared upon return to copyright screen after Game Over/Ending)
//        10 = after exiting a casino game in Practice Mode
//        16 = started Competitive Mode after exiting a casino game in Practice Mode
//        46 = Game Over initiated in Competitive Mode (only for the first 8-9 frames of the "bad end" music, before the screen changes)
function GameProgressIndicator() => byte(0x00C2C5)
function CompetitiveProgressIndicator() => low4(0x00C2C5)
CompetitiveProgressIndicatorValue = {
    "Started": 0x6
}

// $C2C6: [8-bit] Current Mission
//        (Temporarily Persistent - not cleared after Game Ending until Competitive Mode is restarted)
//        00 = Mission 1 (Machine Gun Max), Main Menu, Practice
//        01 = Mission 2 (Suitcase Sam)
//        02 = Mission 3 (Hitman Harry)
//        03 = Mission 4 (Lucky Louis)
//        04 = Mission 5 (Al Cologne)
function CurrentMission() => byte(0x00C2C6)

// $C2C7: [8-bit] Casino Game Mode?
//        (Temporarily Persistent - not cleared after Game Over/Ending until casino game gameplay starts)
//        00 = initial value, Practice Mode
//        04 = Competitive Mode
function CasinoGameMode() => byte(0x00C2C7)
CasinoGameModeValue = {
    "Practice": 0x00,
    "Competitive": 0x04
}

// $C2C8: [8-bit] Is Opponent's Turn?
//        (Video Poker/Draw Poker)
//        00 = player (or neither) has control
//        01 = opponent/AI has control
function IsOpponentsTurn() => byte(0x00C2C8)

// $C2C9: [8-bit] Hand Number
//        (Blackjack/Video Poker/Draw Poker - 1-based value)
function HandNumber() => byte(0x00C2C9)

// $C2CA: [8-bit] Was Casino Game Gameplay Ever Started?
//        (Persistent - 0x05 not cleared between casino games, after exiting Practice Mode, nor after Game Over/Ending)
//        05 = gameplay started
//        64 = initial value
function WasCasinoGameGameplayEverStarted() => byte(0x00C2CA)

// $C2D3: [8-bit] Swap Card - Player Card Number, Shady Purchase Card Number
//        (Blackjack/Video Poker - used in Swap Card window to indicate player's card's placement within hand from L-R (range:
//        0-4). It also changes while shopping at Shady to indicate the purchased card (range: 0-5). Note: the value may change
//        many times while AI opponent uses Swap Card.)
function SwapCardPlayerCardNumberShadyPurchaseCardNumber() => byte(0x00C2D3)

// $C2D4: [8-bit] Swap Card - Opponent Card Number
//        (Blackjack/Video Poker - used in Swap Card window to indicate opponent's card's placement within hand from L-R (range:
//        0-4). Note: the value may change many times while AI opponent uses Swap Card.)
function SwapCardOpponentCardNumber() => byte(0x00C2D4)

// $C2E0: [8-bit] Menu Type?
//        00 = Mode Select, Play/Password Select, Shady
//        02 = Shady Exit Menu, Casino Game Gameplay (when action menu or Craps table active)
//        03 = Practice Game Select, Casino Game Gameplay (when bet menu or Video Poker hold selection active), Continue Screen
//        06 = Craps Menu
//        80 = Copyright Screen, Title Screen
//        (Unmodified/Keeps Prev Value) - Password Screen, Pre/Post-Mission, Credits
function MenuType() => byte(0x00C2E0)
MenuTypeValue = {
    "ModeOrPlayPasswordSelect": 0x00,
    "CopyrightOrTitleScreen": 0x80
}

// $C2E4: [8-bit] Was Number of Players Ever Set?
//        (Persistent - 0x01 value not cleared after Game Over/Ending)
//        00 = initial value
//        01 = selected one player or two player game
function WasNumberOfPlayersEverSet() => byte(0x00C2E4)

// $C2E6: [8-bit] Music Setting
//        02 = Music off
//        03 = Music on (default)
function MusicSetting() => byte(0x00C2E6)

// $C2EF: [8-bit] Menu Cursor Y Position
//        90 = Blackjack - Insurance-Yes
//        98 = Blackjack - Insurance-No
//        (many other values not noted/used)
function MenuCursorYPosition() => byte(0x00C2EF)
MenuCursorYPositionValue = {
    "InsuranceYes": 0x90,
    "InsuranceNo": 0x98
}

// $C40F: [8-bit] Password Letter 1
//        00 = B, 01 = C, 02 = D, 03 = F, 04 = G, 05 = H, 06 = J,
//        07 = K, 08 = L, 09 = M, 0a = N, 0b = P, 0c = Q, 0d = R,
//        0e = S, 0f = T, 10 = V, 11 = W, 12 = X, 13 = Z, 14 = 2,
//        15 = 3, 16 = 4, 17 = 5, 18 = 6, 19 = 7, 1a = 8, 1b = 9,
//        1c = ?, 1d = $, 1e = b, 1f = d, 20 = h, 21 = r, 22 = t,
//        23 = !, 26 = blank
function PasswordLetter1() => byte(0x00C40F)

// $C410: [8-bit] Password Letter 2
//        (see 0xc40f for list)
function PasswordLetter2() => byte(0x00C410)

// $C411: [8-bit] Password Letter 3
//        (see 0xc40f for list)
function PasswordLetter3() => byte(0x00C411)

// $C412: [8-bit] Password Letter 4
//        (see 0xc40f for list)
function PasswordLetter4() => byte(0x00C412)

// $C413: [8-bit] Password Letter 5
//        (see 0xc40f for list)
function PasswordLetter5() => byte(0x00C413)

// $C414: [8-bit] Password Letter 6
//        (see 0xc40f for list)
function PasswordLetter6() => byte(0x00C414)

// $C415: [8-bit] Password Letter 7
//        (see 0xc40f for list)
function PasswordLetter7() => byte(0x00C415)

// $C416: [8-bit] Password Letter 8
//        (see 0xc40f for list)
function PasswordLetter8() => byte(0x00C416)

// $C417: [8-bit] Password Letter 9
//        (see 0xc40f for list)
function PasswordLetter9() => byte(0x00C417)

// $C418: [8-bit] Password Letter 10
//        (see 0xc40f for list)
function PasswordLetter10() => byte(0x00C418)

// $C419: [8-bit] Password Letter 11
//        (see 0xc40f for list)
function PasswordLetter11() => byte(0x00C419)

// $C41A: [8-bit] Password Letter 12
//        (see 0xc40f for list)
function PasswordLetter12() => byte(0x00C41A)

// $CB29: [8-bit] Practice - Hand Counter
//        (Practice Mode Video Poker - value starts at 0 and increments after each hand, otherwise last value persists)
function PracticeHandCounter() => byte(0x00CB29)

// $CB45: [16-bit] Last Placed Bet Amount
//        (Draw Poker - from either player or opponent; the last bet/bet raise, or zero if pass/see bet/call)
function LastPlacedBetAmount() => word(0x00CB45)

// $CB55: [16-bit] Maximum Allowed Bet Amount
//        (Draw Poker)
function MaximumAllowedBetAmount() => word(0x00CB55)

// $CB51: [32-bit] Current Jackpot Amount
//        (Video Poker)
function CurrentJackpotAmount() => dword(0x00CB51)

// $CB5D: [32-bit] Working/Temporary-Use Cash Variable (1)?
//        (Observed values include: Video Poker - Base Payout, Video Poker - Current Bet / 2, Player's Total Accumulated Cash at end of mission)
function WorkingTemporaryUseCashVariable1() => dword(0x00CB5D)

// $CB61: [32-bit] Working/Temporary-Use Cash Variable (2)?
//        (Observed values include: Player's Cash, Jackpot Amount, Bet, Player's Total Accumulated Cash at end of mission)
function WorkingTemporaryUseCashVariable2() => dword(0x00CB61)

// $CB65: [32-bit] Current Pot Amount
//        (Draw Poker)
function CurrentPotAmount() => dword(0x00CB65)

// $CB6D: [32-bit] Player's Mission 3 Cash Winnings
//        (Set at end of mission; not set when password loaded; doesn't include accumulated cash from previous missions)
function PlayersMission3CashWinnings() => dword(0x00CB6D)

// $CB71: [32-bit] Player's Mission 5 Cash Winnings
//        (Set at end of mission; not set when password loaded; doesn't include accumulated cash from previous missions)
function PlayersMission5CashWinnings() => dword(0x00CB71)

// $CB75: [32-bit] Player's Password Cash Winnings
//        (Set when password loaded - total cash winnings from completed missions in password data)
function PlayersPasswordCashWinnings() => dword(0x00CB75)

// $CB79: [32-bit] Player's Mission 1 Cash Winnings
//        (Set at end of mission; not set when password loaded)
function PlayersMission1CashWinnings() => dword(0x00CB79)

// $CB7D: [32-bit] Player's Mission 4 Cash Winnings
//        (Set at end of mission; not set when password loaded; doesn't include accumulated cash from previous missions)
function PlayersMission4CashWinnings() => dword(0x00CB7D)

// $CB81: [32-bit] Player's Mission 2 Cash Winnings
//        (Set at end of mission; not set when password loaded; doesn't include accumulated cash from previous missions)
function PlayersMission2CashWinnings() => dword(0x00CB81)

// $CB81: [8-bit] Dealer's Hand Card Count
//        (Blackjack)
function DealersHandCardCount() => byte(0x00CB8F)

// $CB90: [8-bit] Dealer's Card 1
//        (Blackjack - see 0xcbec for list)
function DealersCard1() => byte(0x00CB90)

// $CB91: [8-bit] Dealer's Card 2
//        (Blackjack - see 0xcbec for list)
function DealersCard2() => byte(0x00CB91)

// $CB92: [8-bit] Dealer's Card 3
//        (Blackjack - see 0xcbec for list)
function DealersCard3() => byte(0x00CB92)

// $CB93: [8-bit] Dealer's Card 4
//        (Blackjack - see 0xcbec for list)
function DealersCard4() => byte(0x00CB93)

// $CB94: [8-bit] Dealer's Card 5
//        (Blackjack - see 0xcbec for list)
function DealersCard5() => byte(0x00CB94)

// $CB95: [8-bit] Dealer's Card 6
//        (Blackjack - see 0xcbec for list)
function DealersCard6() => byte(0x00CB95)

// $CB96: [8-bit] Dealer's Card 7
//        (Blackjack - see 0xcbec for list)
function DealersCard7() => byte(0x00CB96)

// $CB97: [8-bit] Dealer's Card 8
//        (Blackjack - see 0xcbec for list)
function DealersCard8() => byte(0x00CB97)

// $CBB1: [8-bit] Dealer's Hand Result (Unused)
//        (Blackjack - doesn't record result like the others)
//        00 = hand not started
//        08 = hand in progress or any result
function DealersHandResultUnused() => byte(0x00CBB1)

// $CBB2: [8-bit] Dealer's Hand Point Value
//        (Blackjack)
function DealersHandPointValue() => byte(0x00CBB2)

// $CBEB: [8-bit] Player's Hand Card Count
//        (Blackjack/Video Poker/Draw Poker)
function PlayersHandCardCount() => byte(0x00CBEB)

// $CBEC: [8-bit] Player's Hand Card 1
//        (Blackjack/Video Poker/Draw Poker)
//        (Upper4) Rank: 2-9 = pips, a = 10, b = Jack, c = Queen, d = King, e = Ace, f = Joker
//        (Lower4) Suit: 0 = none, 2 = Hearts, 4 = Diamonds, 6 = Spades, 8 = Clubs
//        (Bit Flag) Bit0 = card is face-down
function PlayersHandCard1() => byte(0x00CBEC)

// $CBED: [8-bit]  Player's Hand Card 2
//        (Blackjack/Video Poker/Draw Poker - see 0xcbec for list)
function PlayersHandCard2() => byte(0x00CBED)

// $CBEE: [8-bit]  Player's Hand Card 3
//        (Blackjack/Video Poker/Draw Poker - see 0xcbec for list)
function PlayersHandCard3() => byte(0x00CBEE)

// $CBEF: [8-bit]  Player's Hand Card 4
//        (Blackjack/Video Poker/Draw Poker - see 0xcbec for list)
function PlayersHandCard4() => byte(0x00CBEF)

// $CBF0: [8-bit]  Player's Hand Card 5
//        (Blackjack/Video Poker/Draw Poker - see 0xcbec for list)
function PlayersHandCard5() => byte(0x00CBF0)

// $CBF1: [8-bit]  Player's Hand Card 6
//        (Blackjack - see 0xcbec for list)
function PlayersHandCard6() => byte(0x00CBF1)

// $CBF2: [8-bit]  Player's Hand Card 7
//        (Blackjack - see 0xcbec for list)
function PlayersHandCard7() => byte(0x00CBF2)

// $CBF3: [8-bit]  Player's Hand Card 8
//        (Blackjack - see 0xcbec for list)
function PlayersHandCard8() => byte(0x00CBF3)

// $CBF8: [8-bit] (Duplicate) Player's Hand Card Count
//        (Video Poker/Draw Poker - DO NOT USE/purpose unknown)
function DuplicatePlayersHandCardCount() => byte(0x00CBF8)

// $CBF9: [8-bit] (Duplicate) Player's Hand Card 1
//        (Video Poker/Draw Poker - DO NOT USE/purpose unknown - values not updated properly for 2nd draw or Swap Card; see 0xcbec for list)
function DuplicatePlayersHandCard1() => byte(0x00CBF9)

// $CBFA: [8-bit] (Duplicate) Player's Hand Card 2
//        (Video Poker/Draw Poker - DO NOT USE/purpose unknown - values not updated properly for 2nd draw or Swap Card; see 0xcbec for list)
function DuplicatePlayersHandCard2() => byte(0x00CBFA)

// $CBFB: [8-bit] (Duplicate) Player's Hand Card 3
//        (Video Poker/Draw Poker - DO NOT USE/purpose unknown - values not updated properly for 2nd draw or Swap Card; see 0xcbec for list)
function DuplicatePlayersHandCard3() => byte(0x00CBFB)

// $CBFC: [8-bit] (Duplicate) Player's Hand Card 4
//        (Video Poker/Draw Poker - DO NOT USE/purpose unknown - values not updated properly for 2nd draw or Swap Card; see 0xcbec for list)
function DuplicatePlayersHandCard4() => byte(0x00CBFC)

// $CBFD: [8-bit] (Duplicate) Player's Hand Card 5
//        (Video Poker/Draw Poker - DO NOT USE/purpose unknown - values not updated properly for 2nd draw or Swap Card; see 0xcbec for list)
function DuplicatePlayersHandCard5() => byte(0x00CBFD)

// $CC05: [32-bit] Player's Cash
//        (Blackjack/Video Poker/Draw Poker)
function PlayersCash() => dword(0x00CC05)

// $CC09: [32-bit] Player's Displayed "Bet" Amount
//        (Blackjack/Draw Poker - whichever amount is currently displayed on Bet line, including Ante or zero)
function PlayersDisplayedBetAmount() => dword(0x00CC09)

// $CC0A: [8-bit] Has Doubled Down Flag
//        (Blackjack - for Player; unknown if Opponent uses this or separate address; not used in Practice Mode?)
function HasDoubledDownFlag() => byte(0x00CC0A)

// $CC0D: [8-bit] Player's Hand Result
//        (Blackjack - Bit Flags)
//
//        Bit0 = hand was BJ (if won) or Bust (if lost)
//        Bit1 = hands are split
//        Bit2 = hand doubled down
//        Bit3 = hand is active
//        Bit4 = unused
//        Bit5 = hand won
//        Bit6 = hand tied
//        Bit7 = hand won or tied
//        
//        Observed values:
//        00 = hand not started
//        08 = LOSE or hand in progress
//        09 = BUST
//        0a = LOSE or hand in progress (split)
//        0b = BUST (split)
//        0c = LOSE (doubled down)
//        0d = BUST (doubled down)
//        a0 = (inactive split hand only - "push")
//        a8 = WIN
//        a9 = BJ
//        aa = WIN (split)
//        ab = BJ (split)
//        ac = WIN (doubled down)
//        c0 = (inactive split hand only - "win")
//        c8 = PUSH
//        ca = PUSH (split)
//        cc = PUSH (doubled down)
//
//        (Draw Poker)
//        08 = Didn't Fold
//        09 = Fold
function PlayersHandResult() => byte(0x00CC0D)
function PlayersHandResult_IsSpecial() => bit0(0x00CC0D)
function PlayersHandResult_IsSplit() => bit1(0x00CC0D)
function PlayersHandResult_IsDouble() => bit2(0x00CC0D)
function PlayersHandResult_IsActive() => bit3(0x00CC0D)
function PlayersHandResult_IsWon() => bit5(0x00CC0D)
PlayersHandResultValue = {
    "Fold": 0x09
}

// $CC0E: [8-bit] Player's Hand Point Value
//        (Blackjack)
function PlayersHandPointValue() => byte(0x00CC0E)

// $CC12: [32-bit] Player's Cash at End of Last Hand?
//        (Blackjack/Video Poker/Draw Poker)
function PlayersCashAtEndOfLastHand() => dword(0x00CC12)

// $CC16: [8-bit] Player's Hand Ranking
//        (Video Poker/Draw Poker - value updated for every draw/swap, not just at end of hand)
//        (Upper4) Hand ranking
//        0 = nothing
//        1 = one pair
//        2 = two pair
//        3 = 3 of a kind
//        4 = straight
//        5 = flush
//        6 = full house
//        7 = 4 of a kind
//        8 = straight flush
//        9 = royal flush
//        a = 5 of a kind
//        (Lower4) Highest card rank involved (see 0xcbec for list)
function PlayersHandRanking() => byte(0x00CC16)

// $CC1D: [8-bit] Player's Cheat Card 1 Quantity
//        (Blackjack/Video Poker/Draw Poker - Swap Hand/Joker/Joker)
function PlayersCheatCard1Quantity() => byte(0x00CC1D)

// $CC1E: [8-bit] Player's Cheat Card 2 Quantity
//        (Blackjack/Video Poker/Draw Poker - Swap Card/Swap Card/See Next Card)
function PlayersCheatCard2Quantity() => byte(0x00CC1E)

// $CC1F: [8-bit] Player's Cheat Card 3 Quantity
//        (Blackjack/Video Poker - Ace/See Next Card)
function PlayersCheatCard3Quantity() => byte(0x00CC1F)

// $CC20: [8-bit] Player's Cheat Card 4 Quantity
//        (Blackjack - King)
function PlayersCheatCard4Quantity() => byte(0x00CC20)

// $CC21: [8-bit] Player's Cheat Card 5 Quantity
//        (Blackjack - See Next Card)
function PlayersCheatCard5Quantity() => byte(0x00CC21)

// $CC22: [8-bit] Player's Cheat Card 6 Quantity
//        (Blackjack - See Deal Down)
function PlayersCheatCard6Quantity() => byte(0x00CC22)

// $CC25: [8-bit] Player's Bet Multiplier
//        (Video Poker - range: 1-5, or 0 when no bet)
function PlayersBetMultiplier() => byte(0x00CC25)

// $CC2B: [32-bit] Player's Actual Payout
//        (Blackjack/Video Poker/Draw Poker)
function PlayersActualPayout() => dword(0x00CC2B)

// $CC2F: [32-bit] Player's Last Actual Bet Amount
//        (Blackjack/Draw Poker)
function PlayersLastActualBetAmount() => dword(0x00CC2F)

// $CC33: [32-bit] Player's Current Mission Cash Total
//        (Excluding cash put into current casino game)
function PlayersCurrentMissionCashTotal() => dword(0x00CC33)

// $CC41: [8-bit] Player's Score Card Total (Draw Poker Credits AKA Draw Poker Points)
function PlayersScoreCardTotalDrawPokerPoints() => byte(0x00CC41)

// $CC42: [8-bit] Player's Current Mission Games Won
//        (Temporarily Persistent - not cleared after Game Ending until number of Players is selected. Value = 1 if player won, 0 otherwise; all flags reset to 0 at start of each mission after the cutscene.)
//        (Bit Flags)
//        Bit0 = Blackjack
//        Bit2 = Draw Poker
//        Bit3 = Slots
//        Bit4 = Video Poker
function PlayerWonBlackjack() => bit0(0x00CC42)
function PlayerWonDrawPoker() => bit2(0x00CC42)
function PlayerWonSlots() => bit3(0x00CC42)
function PlayerWonVideoPoker() => bit4(0x00CC42)
function PlayersCurrentMissionGamesWon() => byte(0x00CC42)

// $CC47: [8-bit] Player's Split Hand Card Count
//        (Blackjack - not cleared at end of hand)
function PlayersSplitHandCardCount() => byte(0x00CC47)

// $CC48: [8-bit] Player's Split Hand Card 1
//        (Blackjack - not cleared at end of hand; see 0xcbec for list)
function PlayersSplitHandCard1() => byte(0x00CC48)

// $CC49: [8-bit] Player's Split Hand Card 2
//        (Blackjack - not cleared at end of hand; see 0xcbec for list)
function PlayersSplitHandCard2() => byte(0x00CC49)

// $CC4A: [8-bit] Player's Split Hand Card 3
//        (Blackjack - not cleared at end of hand; see 0xcbec for list)
function PlayersSplitHandCard3() => byte(0x00CC4A)

// $CC4B: [8-bit] Player's Split Hand Card 4
//        (Blackjack - not cleared at end of hand; see 0xcbec for list)
function PlayersSplitHandCard4() => byte(0x00CC4B)

// $CC4C: [8-bit] Player's Split Hand Card 5
//        (Blackjack - not cleared at end of hand; see 0xcbec for list)
function PlayersSplitHandCard5() => byte(0x00CC4C)

// $CC4D: [8-bit] Player's Split Hand Card 6
//        (Blackjack - not cleared at end of hand; see 0xcbec for list)
function PlayersSplitHandCard6() => byte(0x00CC4D)

// $CC4E: [8-bit] Player's Split Hand Card 7
//        (Blackjack - not cleared at end of hand; see 0xcbec for list)
function PlayersSplitHandCard7() => byte(0x00CC4E)

// $CC4F: [8-bit] Player's Split Hand Card 8
//        (Blackjack - not cleared at end of hand; see 0xcbec for list)
function PlayersSplitHandCard8() => byte(0x00CC4F)

// $CC69: [8-bit] Player's Split Hand Result
//        (Blackjack - see 0xcc0d for list; if the split hand is inactive, the other bit values may vary and should be ignored)
function PlayersSplitHandResult() => byte(0x00CC69)
function PlayersSplitHandResult_IsSpecial() => bit0(0x00CC69)
function PlayersSplitHandResult_IsActive() => bit3(0x00CC69)
function PlayersSplitHandResult_IsWon() => bit5(0x00CC69)

// $CC6A: [8-bit] Player's Split Hand Point Value
//        (Blackjack - not cleared at end of hand)
function PlayersSplitHandPointValue() => byte(0x00CC6A)

// $CC79: [8-bit] Player's Cheat Coin 1 Quantity at Shady
//        (Slots - Sevens AKA Gold Coin; cleared upon exiting Shady)
function PlayersCheatCoin1QuantityAtShady() => byte(0x00CC79)

// $CC7A: [8-bit] Player's Cheat Coin 2 Quantity at Shady
//        (Slots - Bars AKA Silver Coin; cleared upon exiting Shady)
function PlayersCheatCoin2QuantityAtShady() => byte(0x00CC7A)

// $CCA3: [8-bit] Opponent's Hand Card Count
//        (Blackjack/Video Poker/Draw Poker)
function OpponentsHandCardCount() => byte(0x00CCA3)

// $CCA4: [8-bit] Opponent's Hand Card 1
//        (Blackjack/Video Poker/Draw Poker - see 0xcbec for list)
function OpponentsHandCard1() => byte(0x00CCA4)

// $CCA5: [8-bit] Opponent's Hand Card 2
//        (Blackjack/Video Poker/Draw Poker - see 0xcbec for list)
function OpponentsHandCard2() => byte(0x00CCA5)

// $CCA6: [8-bit] Opponent's Hand Card 3
//        (Blackjack/Video Poker/Draw Poker - see 0xcbec for list)
function OpponentsHandCard3() => byte(0x00CCA6)

// $CCA7: [8-bit] Opponent's Hand Card 4
//        (Blackjack/Video Poker/Draw Poker - see 0xcbec for list)
function OpponentsHandCard4() => byte(0x00CCA7)

// $CCA8: [8-bit] Opponent's Hand Card 5
//        (Blackjack/Video Poker/Draw Poker - see 0xcbec for list)
function OpponentsHandCard5() => byte(0x00CCA8)

// $CCA9: [8-bit] Opponent's Hand Card 6
//        (Blackjack - see 0xcbec for list)
function OpponentsHandCard6() => byte(0x00CCA9)

// $CCAA: [8-bit] Opponent's Hand Card 7
//        (Blackjack - see 0xcbec for list)
function OpponentsHandCard7() => byte(0x00CCAA)

// $CCAB: [8-bit] Opponent's Hand Card 8
//        (Blackjack - see 0xcbec for list)
function OpponentsHandCard8() => byte(0x00CCAB)

// $CCB0: [8-bit] (Duplicate) Opponent's Hand Card Count
//        (Video Poker/Draw Poker - DO NOT USE/purpose unknown)
function DuplicateOpponentsHandCardCount() => byte(0x00CCB0)

// $CCB1: [8-bit] (Duplicate) Opponent's Hand Card 1
//        (Video Poker/Draw Poker - DO NOT USE/purpose unknown - values not updated properly for 2nd draw or Swap Card; see 0xcbec for list)
function DuplicateOpponentsHandCard1() => byte(0x00CCB1)

// $CCB2: [8-bit] (Duplicate) Opponent's Hand Card 2
//        (Video Poker/Draw Poker - DO NOT USE/purpose unknown - values not updated properly for 2nd draw or Swap Card; see 0xcbec for list)
function DuplicateOpponentsHandCard2() => byte(0x00CCB2)

// $CCB3: [8-bit] (Duplicate) Opponent's Hand Card 3
//        (Video Poker/Draw Poker - DO NOT USE/purpose unknown - values not updated properly for 2nd draw or Swap Card; see 0xcbec for list)
function DuplicateOpponentsHandCard3() => byte(0x00CCB3)

// $CCB4: [8-bit] (Duplicate) Opponent's Hand Card 4
//        (Video Poker/Draw Poker - DO NOT USE/purpose unknown - values not updated properly for 2nd draw or Swap Card; see 0xcbec for list)
function DuplicateOpponentsHandCard4() => byte(0x00CCB4)

// $CCB5: [8-bit] (Duplicate) Opponent's Hand Card 5
//        (Video Poker/Draw Poker - DO NOT USE/purpose unknown - values not updated properly for 2nd draw or Swap Card; see 0xcbec for list)
function DuplicateOpponentsHandCard5() => byte(0x00CCB5)

// $CCBD: [32-bit] Opponent's Cash
//        (Blackjack/Video Poker/Draw Poker)
function OpponentsCash() => dword(0x00CCBD)

// $CCC1: [32-bit] Opponent's Displayed "Bet" Amount
//        (Blackjack/Draw Poker - whichever amount is currently displayed on Bet line, including Ante or zero)
function OpponentsDisplayedBetAmount() => dword(0x00CCC1)

// $CCC5: [8-bit] Opponent's Hand Result
//        (Blackjack/Draw Poker - see 0xcc0d for list)
function OpponentsHandResult() => byte(0x00CCC5)
function OpponentsHandResult_IsSpecial() => bit0(0x00CCC5)
function OpponentsHandResult_IsWonOrTied() => bit7(0x00CCC5)

// $CCC6: [8-bit] Opponent's Hand Point Value
//        (Blackjack)
function OpponentsHandPointValue() => byte(0x00CCC6)

// $CCCE: [8-bit] Opponent's Hand Ranking
//        (Video Poker/Draw Poker - value updated for every draw/swap, not just at end of hand)
//        (Upper4) Hand ranking (see 0xcc16 for list)
//        (Lower4) Highest card rank involved (see 0xcbec for list)
function OpponentsHandRanking() => byte(0x00CCCE)										 

// $CCD5: [8-bit] Opponent's Cheat Card 1 Quantity
//        (Blackjack/Video Poker/Draw Poker - Swap Hand/Joker/Joker)
function OpponentsCheatCard1Quantity() => byte(0x00CCD5)

// $CCD6: [8-bit] Opponent's Cheat Card 2 Quantity
//        (Blackjack/Video Poker/Draw Poker - Swap Card/Swap Card/See Next Card)
function OpponentsCheatCard2Quantity() => byte(0x00CCD6)

// $CCD7: [8-bit] Opponent's Cheat Card 3 Quantity
//        (Blackjack/Video Poker - Ace/See Next Card)
function OpponentsCheatCard3Quantity() => byte(0x00CCD7)

// $CCD8: [8-bit] Opponent's Cheat Card 4 Quantity
//        (Blackjack - King)
function OpponentsCheatCard4Quantity() => byte(0x00CCD8)

// $CCD9: [8-bit] Opponent's Cheat Card 5 Quantity
//        (Blackjack - See Next Card)
function OpponentsCheatCard5Quantity() => byte(0x00CCD9)

// $CCDA: [8-bit] Opponent's Cheat Card 6 Quantity
//        (Blackjack - See Deal Down)
function OpponentsCheatCard6Quantity() => byte(0x00CCDA)

// $CCDD: [8-bit] Opponent's Bet Multiplier
//        (Video Poker - range: 1-5, or 0 when no bet)
function OpponentsBetMultiplier() => byte(0x00CCDD)

// $CCE3: [32-bit] Opponent's Actual Payout
//        (Blackjack/Video Poker/Draw Poker)
function OpponentsActualPayout() => dword(0x00CCE3)

// $CCE7: [32-bit] Opponent's Last Actual Bet Amount
//        (Blackjack/Draw Poker)
function OpponentsLastActualBetAmount() => dword(0x00CCE7)

// $CCEB: [32-bit] Working/Temporary-Use Cash Variable (3)?
//        (Observed values include: Player's Cash, Player's Total Accumulated Cash at end of mission)
function WorkingTemporaryUseCashVariable3() => dword(0x00CCEB)

// $CCF9: [8-bit] Opponent's Score Card Total (Draw Poker Credits AKA Draw Poker Points)
function OpponentsScoreCardTotalDrawPokerPoints() => byte(0x00CCF9)

// $D42B: [16-bit BE] Last Payout (BCD)
//        (Craps)
function LastPayoutBcd() => word_be(0x00D42B)

// $D430: [16-bit BE] Last Bet - Total Bet Amount (BCD)
//        (Craps - initial value 0; value reset to 1 after roll)
function LastBetTotalBetAmountBcd() => word_be(0x00D430)

// $D43E: [32-bit BE] Current Jackpot Amount (BCD)
//        (Slots)
function CurrentJackpotAmountBcd() => dword_be(0x00D43E)

// $D442: [8-bit] Bet Increment
//        (Slots)
//        00 = $1
//        01 = $5
//        02 = $10
//        03 = $25
//        04 = $50
//        05 = $100
function BetIncrement() => byte(0x00D442)

// $D444: [8-bit] Player's Bet Multiplier
//        (Slots - range: 1-3, or 0 when no bet)
function SlotsPlayersBetMultiplier() => byte(0x00D444)

// $D445: [8-bit] Opponent's Bet Multiplier
//        (Slots - range: 1-3, or 0 when no bet)
function SlotsOpponentsBetMultiplier() => byte(0x00D445)

// $D446: [8-bit] Spin Number
//        (Slots - 0-based value)
function SpinNumber() => byte(0x00D446)

// $D44D: [16-bit] Player's Reel 1 Position
//        (Slots - list denotes the symbols from top to bottom when the reel stops, unless replaced with a cheat/bonus item)
//        0000 = orange/cherry/bell
//        0010 = cherry/bell/plum
//        0020 = bell/plum/orange
//        0030 = plum/orange/melon
//        0040 = orange/melon/plum
//        0050 = melon/plum/bar
//        0060 = plum/bar/melon
//        0070 = bar/melon/seven
//        0080 = melon/seven/orange
//        0090 = seven/orange/cherry
//        00a0 = orange/cherry/plum
//        00b0 = cherry/plum/cherry
//        00c0 = plum/cherry/bell
//        00d0 = cherry/bell/melon
//        00e0 = bell/melon/orange
//        00f0 = melon/orange/cherry
//        0100 = orange/cherry/bar
//        0110 = cherry/bar/plum
//        0120 = bar/plum/orange
//        0130 = plum/orange/cherry
function PlayersReel1Position() => word(0x00D44D)

// $D44F: [16-bit] Player's Reel 2 Position
//        (Slots - list denotes the symbols from top to bottom when the reel stops, unless replaced with a cheat/bonus item)
//        0000 = plum/orange/melon
//        0010 = orange/melon/cherry
//        0020 = melon/cherry/plum
//        0030 = cherry/plum/orange
//        0040 = plum/orange/bell
//        0050 = orange/bell/cherry
//        0060 = bell/cherry/bar
//        0070 = cherry/bar/melon
//        0080 = bar/melon/seven
//        0090 = melon/seven/cherry
//        00a0 = seven/cherry/bell
//        00b0 = cherry/bell/orange
//        00c0 = bell/orange/plum
//        00d0 = orange/plum/cherry
//        00e0 = plum/cherry/orange
//        00f0 = cherry/orange/bar
//        0100 = orange/bar/plum
//        0110 = bar/plum/orange
//        0120 = plum/orange/plum
//        0130 = orange/plum/orange
function PlayersReel2Position() => word(0x00D44F)

// $D451: [16-bit] Player's Reel 3 Position
//        (Slots - list denotes the symbols from top to bottom when the reel stops, unless replaced with a cheat/bonus item)
//        0000 = cherry/seven/orange
//        0010 = seven/orange/cherry
//        0020 = orange/cherry/melon
//        0030 = cherry/melon/plum
//        0040 = melon/plum/cherry
//        0050 = plum/cherry/orange
//        0060 = cherry/orange/bell
//        0070 = orange/bell/plum
//        0080 = bell/plum/bell
//        0090 = plum/bell/melon
//        00a0 = bell/melon/cherry
//        00b0 = melon/cherry/bar
//        00c0 = cherry/bar/orange
//        00d0 = bar/orange/plum
//        00e0 = orange/plum/melon
//        00f0 = plum/melon/orange
//        0100 = melon/orange/cherry
//        0110 = orange/cherry/bell
//        0120 = cherry/bell/cherry
//        0130 = bell/cherry/seven
function PlayersReel3Position() => word(0x00D451)

// $D453: [16-bit] Opponent's Reel 1 Position
//        (Slots - see 0xd44d for list)
function OpponentsReel1Position() => word(0x00D453)

// $D455: [16-bit] Opponent's Reel 2 Position
//        (Slots - see 0xd44f for list)
function OpponentsReel2Position() => word(0x00D455)

// $D457: [16-bit] Opponent's Reel 3 Position
//        (Slots - see 0xd451 for list)
function OpponentsReel3Position() => word(0x00D457)

// $D459: [16-bit] Player's Payout Line 1 Bet Multiplier
//        (Slots - not set until end of spin)
function PlayersPayoutLine1BetMultiplier() => word(0x00D459)

// $D45B: [16-bit] Player's Payout Line 2 Bet Multiplier
//        (Slots - not set until end of spin)
function PlayersPayoutLine2BetMultiplier() => word(0x00D45B)

// $D45D: [16-bit] Player's Payout Line 3 Bet Multiplier
//        (Slots - not set until end of spin)
function PlayersPayoutLine3BetMultiplier() => word(0x00D45D)

// $D45F: [16-bit] Opponent's Payout Line 1 Bet Multiplier
//        (Slots)
function OpponentsPayoutLine1BetMultiplier() => word(0x00D45F)

// $D461: [16-bit] Opponent's Payout Line 2 Bet Multiplier
//        (Slots)
function OpponentsPayoutLine2BetMultiplier() => word(0x00D461)

// $D463: [16-bit] Opponent's Payout Line 3 Bet Multiplier
//        (Slots)
function OpponentsPayoutLine3BetMultiplier() => word(0x00D463)

// $D475: [8-bit] Bonus Item 1 Type
//        (Slots - appears at Spin 3)
//        00 = Orange
//        01 = Plum
//        02 = Bell
//        03 = Melon
//        04 = Bar
//        05 = Seven
//        06 = Cherry
function BonusItem1Type() => byte(0x00D475)

// $D479: [8-bit] Bonus Item 2 Type
//        (Slots - appears at Spin 7; see 0xd475 for list)
function BonusItem2Type() => byte(0x00D479)

// $D490: [8-bit] Player's Cheat Coin 1 Quantity
//        (Slots - Sevens AKA Gold Coin; set after exiting Shady; decremented when spin starts if cheat used)
function PlayersCheatCoin1Quantity() => byte(0x00D490)

// $D491: [8-bit] Player's Cheat Coin 2 Quantity
//        (Slots - Bars AKA Silver Coin; set after exiting Shady; decremented when spin starts if cheat used)
function PlayersCheatCoin2Quantity() => byte(0x00D491)

// $D4A6: [16-bit BE] Bonus Item Price (BCD)
//        (Slots)
function BonusItemPriceBcd() => word_be(0x00D4A6)

// $D4D0: [16-bit] Player's Payout Total Bet Multiplier
//        (Slots)
function PlayersPayoutTotalBetMultiplier() => word(0x00D4D0)

// $D4D2: [16-bit] Opponent's Payout Total Bet Multiplier
//        (Slots)
function OpponentsPayoutTotalBetMultiplier() => word(0x00D4D2)

// $D4D6: [16-bit] "Pass" Bet Amount
//        (Craps)
function PassBetAmount() => word(0x00D4D6)

// $D4D8: [16-bit] "Don't Pass" Bet Amount
//        (Craps)
function DonTPassBetAmount() => word(0x00D4D8)

// $D4F2: [16-bit] "Come" Bet Amount
//        (Craps)
function ComeBetAmount() => word(0x00D4F2)

// $D4F4: [16-bit] "Don't Come" Bet Amount
//        (Craps)
function DonTComeBetAmount() => word(0x00D4F4)

// $D4F6: [16-bit] "Lay 4" Bet Amount
//        (Craps)
function Lay4BetAmount() => word(0x00D4F6)

// $D4F8: [16-bit] "Lay 5" Bet Amount
//        (Craps)
function Lay5BetAmount() => word(0x00D4F8)

// $D4FA: [16-bit] "Lay 6" Bet Amount
//        (Craps)
function Lay6BetAmount() => word(0x00D4FA)

// $D4FC: [16-bit] "Lay 8" Bet Amount
//        (Craps)
function Lay8BetAmount() => word(0x00D4FC)

// $D4FE: [16-bit] "Lay 9" Bet Amount
//        (Craps)
function Lay9BetAmount() => word(0x00D4FE)

// $D501: [16-bit] "Lay 10" Bet Amount
//        (Craps)
function Lay10BetAmount() => word(0x00D501)

// $D502: [16-bit] "Seven" Bet Amount
//        (Craps)
function SevenBetAmount() => word(0x00D502)

// $D504: [16-bit] "Buy 4" Bet Amount
//        (Craps)
function Buy4BetAmount() => word(0x00D504)

// $D506: [16-bit] "Buy 5" Bet Amount
//        (Craps)
function Buy5BetAmount() => word(0x00D506)

// $D508: [16-bit] "Buy 6" Bet Amount
//        (Craps)
function Buy6BetAmount() => word(0x00D508)

// $D50A: [16-bit] "Buy 8" Bet Amount
//        (Craps)
function Buy8BetAmount() => word(0x00D50A)

// $D50C: [16-bit] "Buy 9" Bet Amount
//        (Craps)
function Buy9BetAmount() => word(0x00D50C)

// $D50E: [16-bit] "Buy 10" Bet Amount
//        (Craps)
function Buy10BetAmount() => word(0x00D50E)

// $D510: [16-bit] "Hard 4" Bet Amount
//        (Craps)
function Hard4BetAmount() => word(0x00D510)

// $D512: [16-bit] "Hard 10" Bet Amount
//        (Craps)
function Hard10BetAmount() => word(0x00D512)

// $D514: [16-bit] "Place 4" Bet Amount
//        (Craps)
function Place4BetAmount() => word(0x00D514)

// $D516: [16-bit] "Place 5" Bet Amount
//        (Craps)
function Place5BetAmount() => word(0x00D516)

// $D518: [16-bit] "Place 6" Bet Amount
//        (Craps)
function Place6BetAmount() => word(0x00D518)

// $D51A: [16-bit] "Place 8" Bet Amount
//        (Craps)
function Place8BetAmount() => word(0x00D51A)

// $D51C: [16-bit] "Place 9" Bet Amount
//        (Craps)
function Place9BetAmount() => word(0x00D51C)

// $D51E: [16-bit] "Place 10" Bet Amount
//        (Craps)
function Place10BetAmount() => word(0x00D51E)

// $D520: [16-bit] "Hard 6" Bet Amount
//        (Craps)
function Hard6BetAmount() => word(0x00D520)

// $D522: [16-bit] "Hard 8" Bet Amount
//        (Craps)
function Hard8BetAmount() => word(0x00D522)

// $D524: [16-bit] "Craps 2" Bet Amount
//        (Craps)
function Craps2BetAmount() => word(0x00D524)

// $D526: [16-bit] "Horn" Bet Amount
//        (Craps)
function HornBetAmount() => word(0x00D526)

// $D528: [16-bit] "Craps 12" Bet Amount
//        (Craps)
function Craps12BetAmount() => word(0x00D528)

// $D52A: [16-bit] "Big 6" Bet Amount
//        (Craps)
function Big6BetAmount() => word(0x00D52A)

// $D52C: [16-bit] "Field" Bet Amount
//        (Craps)
function FieldBetAmount() => word(0x00D52C)

// $D52E: [16-bit] "Craps 3" Bet Amount
//        (Craps)
function Craps3BetAmount() => word(0x00D52E)

// $D530: [16-bit] "Yoleven" Bet Amount
//        (Craps)
function YolevenBetAmount() => word(0x00D530)

// $D532: [16-bit] "Big 8" Bet Amount
//        (Craps)
function Big8BetAmount() => word(0x00D532)

// $D534: [16-bit] "Any Craps" Bet Amount
//        (Craps)
function AnyCrapsBetAmount() => word(0x00D534)

// $D556: [16-bit] "C and E" Bet Amount
//        (Craps)
function CAndEBetAmount() => word(0x00D556)

// $D59A: [16-bit] "Pass Odds" Bet Amount
//        (Craps)
function PassOddsBetAmount() => word(0x00D59A)

// $D59C: [16-bit] "Don't Pass Odds" Bet Amount
//        (Craps)
function DonTPassOddsBetAmount() => word(0x00D59C)

// $D5E0: [16-bit] Has Bet on "Lay 4" Flag
//        (Craps)
function HasBetOnLay4Flag() => word(0x00D5E0)

// $D5E1: [16-bit] Has Bet on "Lay 5" Flag
//        (Craps)
function HasBetOnLay5Flag() => word(0x00D5E1)

// $D5E2: [16-bit] Has Bet on "Lay 6" Flag
//        (Craps)
function HasBetOnLay6Flag() => word(0x00D5E2)

// $D5E3: [16-bit] Has Bet on "Lay 8" Flag
//        (Craps)
function HasBetOnLay8Flag() => word(0x00D5E3)

// $D5E4: [16-bit] Has Bet on "Lay 9" Flag
//        (Craps)
function HasBetOnLay9Flag() => word(0x00D5E4)

// $D5E5: [16-bit] Has Bet on "Lay 10" Flag
//        (Craps)
function HasBetOnLay10Flag() => word(0x00D5E5)

// $D5E7: [16-bit] Has Bet on "Buy 4" Flag
//        (Craps)
function HasBetOnBuy4Flag() => word(0x00D5E7)

// $D5E8: [16-bit] Has Bet on "Buy 5" Flag
//        (Craps)
function HasBetOnBuy5Flag() => word(0x00D5E8)

// $D5E9: [16-bit] Has Bet on "Buy 6" Flag
//        (Craps)
function HasBetOnBuy6Flag() => word(0x00D5E9)

// $D5EA: [16-bit] Has Bet on "Buy 8" Flag
//        (Craps)
function HasBetOnBuy8Flag() => word(0x00D5EA)

// $D5EB: [16-bit] Has Bet on "Buy 9" Flag
//        (Craps)
function HasBetOnBuy9Flag() => word(0x00D5EB)

// $D5EC: [16-bit] Has Bet on "Buy 10" Flag
//        (Craps)
function HasBetOnBuy10Flag() => word(0x00D5EC)

// $D5ED: [16-bit] Has Bet on "Hard 4" Flag
//        (Craps)
function HasBetOnHard4Flag() => word(0x00D5ED)

// $D5EE: [16-bit] Has Bet on "Hard 10" Flag
//        (Craps)
function HasBetOnHard10Flag() => word(0x00D5EE)

// $D5EF: [16-bit] Has Bet on "Place 4" Flag
//        (Craps)
function HasBetOnPlace4Flag() => word(0x00D5EF)

// $D5F0: [16-bit] Has Bet on "Place 5" Flag
//        (Craps)
function HasBetOnPlace5Flag() => word(0x00D5F0)

// $D5F1: [16-bit] Has Bet on "Place 6" Flag
//        (Craps)
function HasBetOnPlace6Flag() => word(0x00D5F1)

// $D5F2: [16-bit] Has Bet on "Place 8" Flag
//        (Craps)
function HasBetOnPlace8Flag() => word(0x00D5F2)

// $D5F3: [16-bit] Has Bet on "Place 9" Flag
//        (Craps)
function HasBetOnPlace9Flag() => word(0x00D5F3)

// $D5F4: [16-bit] Has Bet on "Place 10" Flag
//        (Craps)
function HasBetOnPlace10Flag() => word(0x00D5F4)

// $D5F5: [16-bit] Has Bet on "Hard 6" Flag
//        (Craps)
function HasBetOnHard6Flag() => word(0x00D5F5)

// $D5F6: [16-bit] Has Bet on "Hard 8" Flag
//        (Craps)
function HasBetOnHard8Flag() => word(0x00D5F6)

// $D620: [16-bit BE] Currently Displayed Payout (BCD)
//        (Craps)
function CurrentlyDisplayedPayoutBcd() => word_be(0x00D620)

// $D646: [8-bit] Practice - Spin Counter
//        (Practice Mode Slots - value starts at 1 and increments each spin, otherwise initial value is 0x20 and last value persists)
function PracticeSpinCounter() => byte(0x00D646)

// $D647: [8-bit] Is Fast Roll On
//        (Craps)
//        00 = Fast Roll setting off
//        01 = Fast Roll setting on (default)
function IsFastRollOn() => byte(0x00D647)

// $FFCA: [16-bit] Current Bet Amount
//        (Craps)
function CurrentBetAmount() => word(0x00FFCA)

// $FFD1: [32-bit BE] Player's Cash (BCD)
//        (Slots/Craps)
function PlayersCashBcd() => dword_be(0x00FFD1)

// $FFD5: [32-bit BE] Opponent's Cash (BCD)
//        (Slots)
function OpponentsCashBcd() => dword_be(0x00FFD5)

// $FFDB: [16-bit BE] Current Bet/Payout Amount (BCD)
//        (Slots)
function CurrentBetPayoutAmountBcd() => word_be(0x00FFDB)
